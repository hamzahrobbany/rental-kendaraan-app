// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================
// ENUMS
// ==========================

enum Role {
  CUSTOMER
  OWNER
  ADMIN
}

enum VehicleType {
  SUV
  MPV
  SEDAN
  HATCHBACK
  SPORT
  TRUCK
  MOTORCYCLE
  OTHER
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
}

enum FuelType { // PERBAIKAN: Mengubah nama enum agar konsisten
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
}

enum PaymentMethod {
  BANK_TRANSFER_MANUAL
  BANK_TRANSFER_AUTOMATIC
  CREDIT_CARD
  E_WALLET
}

enum OrderStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
  PAID
  ACTIVE
  COMPLETED
  CANCELED
}

// ==========================
// MODELS
// ==========================

model User {
  id                Int        @id @default(autoincrement())
  name              String?
  email             String     @unique
  emailVerified     DateTime?  // PERBAIKAN: Menghapus @default(null)
  password          String?
  image             String?
  role              Role       @default(CUSTOMER)
  isVerifiedByAdmin Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  accounts          Account[]
  sessions          Session[]
  vehicles          Vehicle[]
  orders            Order[]
  reviews           Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vehicle {
  id             Int            @id @default(autoincrement())
  ownerId        Int
  name           String
  slug           String         @unique
  description    String?        @db.Text
  type           VehicleType
  capacity       Int            // Jumlah penumpang/kursi
  transmissionType TransmissionType
  fuelType       FuelType
  dailyRate      Decimal        @db.Decimal(10, 2)
  lateFeePerDay  Decimal        @db.Decimal(10, 2)
  mainImageUrl   String?        // PERBAIKAN: Menghapus @default(null)
  isAvailable    Boolean        @default(true)
  licensePlate   String?        @unique
  city           String?        // PERBAIKAN: Menghapus @default(null)
  address        String?        @db.Text
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  owner          User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images         VehicleImage[]
  orders         Order[]
  reviews        Review[]
}

model VehicleImage {
  id        Int      @id @default(autoincrement())
  vehicleId Int
  imageUrl  String
  altText   String?
  createdAt DateTime @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          Int
  vehicleId       Int
  startDate       DateTime      // PERBAIKAN: Dibuat WAJIB
  endDate         DateTime      // PERBAIKAN: Dibuat WAJIB
  rentalDays      Int?          // PERBAIKAN: Menghapus @default(null)
  totalPrice      Decimal?      @db.Decimal(10, 2) // PERBAIKAN: Menghapus @default(null)
  depositAmount   Decimal?      @db.Decimal(10, 2) // PERBAIKAN: Menghapus @default(null)
  remainingAmount Decimal?      @db.Decimal(10, 2) // PERBAIKAN: Menghapus @default(null)
  paymentMethod   PaymentMethod? // PERBAIKAN: Menghapus @default(null)
  orderStatus     OrderStatus   @default(PENDING_REVIEW)
  adminNotes      String?       @db.Text
  pickupLocation  String?       @db.Text
  returnLocation  String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle         Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([vehicleId])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  vehicleId Int
  rating    Int      @default(0) @db.SmallInt
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([vehicleId])
}
